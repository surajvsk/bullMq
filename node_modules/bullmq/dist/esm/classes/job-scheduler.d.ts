import { RedisClient, RepeatBaseOptions, RepeatOptions } from '../interfaces';
import { JobsOptions } from '../types';
import { Job } from './job';
import { QueueBase } from './queue-base';
import { RedisConnection } from './redis-connection';
export interface JobSchedulerJson {
    key: string;
    name: string;
    id?: string | null;
    endDate: number | null;
    tz: string | null;
    pattern: string | null;
    every?: string | null;
    next?: number;
}
export declare class JobScheduler extends QueueBase {
    private repeatStrategy;
    constructor(name: string, opts: RepeatBaseOptions, Connection?: typeof RedisConnection);
    upsertJobScheduler<T = any, R = any, N extends string = string>(jobSchedulerId: string, repeatOpts: Omit<RepeatOptions, 'key' | 'prevMillis' | 'offset'>, jobName: N, jobData: T, opts: Omit<JobsOptions, 'jobId' | 'repeat' | 'delay'>, { override }: {
        override: boolean;
    }): Promise<Job<T, R, N> | undefined>;
    private createNextJob;
    removeJobScheduler(jobSchedulerId: string): Promise<number>;
    private getSchedulerData;
    private keyToData;
    getJobScheduler(id: string): Promise<JobSchedulerJson>;
    getJobSchedulers(start?: number, end?: number, asc?: boolean): Promise<JobSchedulerJson[]>;
    getSchedulersCount(client: RedisClient, prefix: string, queueName: string): Promise<number>;
    private getSchedulerNextJobId;
}
export declare const defaultRepeatStrategy: (millis: number, opts: RepeatOptions) => number | undefined;
